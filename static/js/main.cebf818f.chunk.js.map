{"version":3,"sources":["hooks/getCity.js","Component/CitySelector.js","config/index.js","hooks/getWeather.js","Component/WeatherCard.js","Component/WeatherList.js","App.js","serviceWorker.js","index.js"],"names":["getCity","CitySelector","onSelectButtonClick","useState","city","setCity","id","Form","Field","placeholder","onChange","e","target","value","Button","onClick","fullUrl","getWeather","axios","handleResponse","res","data","error","status","console","log","message","WeatherCard","dt","min","max","main","icon","day","country","date","Date","Card","Image","src","Content","Header","getFullYear","getMonth","getDate","WeatherList","list","map","index","temp","weather","List","key","name","App","setData","setError","progress","setProgress","useEffect","a","response","fetchData","Container","className","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cebf818f.chunk.js","sourcesContent":["// Comments added\r\nimport React from \"react\";\r\n\r\nexport const getCity = () => {\r\n  return <div>GetCity</div>;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Button, Form } from \"semantic-ui-react\";\r\nimport \"./citystyle.css\";\r\n\r\nconst CitySelector = ({ onSelectButtonClick }) => {\r\n  const [city, setCity] = useState(null);\r\n\r\n  return (\r\n    <>\r\n      <h1 id=\"temp\">Hello, select your city!</h1>\r\n      <Form>\r\n        <Form.Field>\r\n          <input\r\n            id=\"form-control\"\r\n            placeholder=\"Enter city\"\r\n            onChange={e => setCity(e.target.value)}\r\n          />\r\n        </Form.Field>\r\n        <Button onClick={() => onSelectButtonClick(city)}>Check weather</Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CitySelector;\r\n","export const apiKey = \"0ef3791cdd604bb0d202c7c6071c871a\";\r\nexport const baseUrl = \"http://api.openweathermap.org/\";\r\nexport const fullUrl = `${baseUrl}/data/2.5/forecast/daily?cnt=1&appId=${apiKey}&units=metric&q=`;\r\n","import axios from \"axios\";\r\nimport { fullUrl } from \"../config\";\r\n\r\nexport function getWeather(city) {\r\n  return axios(`${fullUrl}${city}`);\r\n}\r\n\r\nexport function handleResponse(res) {\r\n  let data = null,\r\n    error = null;\r\n  // console.log(res.status);\r\n  switch (res.status) {\r\n    case 404:\r\n    case 400:\r\n      console.log(`case 4xx: ${res.status}`, res);\r\n      error = res.data.message;\r\n      break;\r\n    case 200:\r\n      console.log(\"case 200\");\r\n      data = res.data;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  return [data, error];\r\n}\r\n","import React from \"react\";\r\nimport { Card, Image } from \"semantic-ui-react\";\r\n\r\nconst WeatherCard = ({ dt, min, max, main, icon, day, city, country }) => {\r\n  const date = new Date(dt);\r\n  return (\r\n    <Card>\r\n      <Image src={`http://openweathermap.org/img/wn/${icon}@2x.png`} />\r\n      <Card.Content>\r\n        <Card.Header> City : {city}</Card.Header>\r\n        <p>Country: {country}</p>\r\n        <p>{main}</p>\r\n        <p>\r\n          {date.getFullYear()}-{date.getMonth() + 1}-{date.getDate()}\r\n        </p>\r\n        <p>Day: {day}</p>\r\n        <p>Min: {min}</p>\r\n        <p>Max: {max}</p>\r\n      </Card.Content>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default WeatherCard;\r\n","import React from \"react\";\r\nimport { Card, List } from \"semantic-ui-react\";\r\nimport WeatherCard from \"./WeatherCard\";\r\n\r\nconst WeatherList = ({ data }) => (\r\n  <Card>\r\n    <Card.Content>\r\n      {data &&\r\n        data.list &&\r\n        data.list.map(({ dt, temp, weather }, index) => (\r\n          <List key={index}>\r\n            <WeatherCard\r\n              city={data.city.name}\r\n              country={data.city.country}\r\n              min={temp.min}\r\n              max={temp.max}\r\n              day={temp.day}\r\n              dt={dt * 1000}\r\n              main={weather[0].main}\r\n              icon={weather[0].icon}\r\n            />\r\n          </List>\r\n        ))}\r\n    </Card.Content>\r\n  </Card>\r\n);\r\n\r\nexport default WeatherList;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { getCity } from \"./hooks/getCity\";\nimport CitySelector from \"./Component/CitySelector\";\nimport { Container } from \"semantic-ui-react\";\nimport { getWeather, handleResponse } from \"./hooks/getWeather\";\nimport WeatherList from \"./Component/WeatherList\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nconst App = () => {\n  // const { data, error, setUrl } = useFetch(); no need for it as use a method\n  // we need four variable here i-e data, error, city, progress will useState to maintain them\n  const [city, setCity] = useState(null);\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(false);\n  const [progress, setProgress] = useState(false);\n\n  //Now  want our this component to perfrom side effect (data fetching etc) when the city changes\n  // will do  fetchData which is a side effect in the useEffect hook like this\n  // when do i want our effect to run? when the city changes so pass it as a dependency\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        setProgress(true);\n        if (!city) return;\n        const response = await getWeather(city);\n        const [data, error] = handleResponse(response);\n        setData(data);\n        setError(error);\n        setProgress(false);\n      } catch (e) {\n        const [data, error] = handleResponse(e.response);\n        setError(error);\n        setData(data);\n        setProgress(false);\n      }\n    }\n    fetchData();\n  }, [city]);\n\n  const getContent = () => {\n    if (!city) return null;\n    if (progress) return <h2> Loading...Please wait! </h2>;\n    if (error) return <h2> Error: {error} </h2>; // default\n    return <WeatherList data={data} />;\n  };\n  // on check weather button we will set our city\n  return (\n    <Router>\n      <Container className=\"App\">\n        <CitySelector onSelectButtonClick={(city) => setCity(city)} />\n        {getContent()}\n        <Route path=\"./city\" component={getCity} />\n      </Container>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}